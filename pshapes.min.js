class pShape{static IMAGE_CACHE=new Map;static DEFAULT_TOP_FILL="red";static DEFAULT_BOTTOM_FILL="blue";static DEFAULT_SIDE_FILLS=["green"];static FILETYPES=[".png",".jpg",".jpeg",".svg",".webp"];constructor(t,e={}){const{width:i=144,height:s=144,length:h=240,speed_x:o=1.5,speed_y:a=.25,num_sides:n=100,top_fill:r=pShape.DEFAULT_TOP_FILL,bottom_fill:_=pShape.DEFAULT_BOTTOM_FILL,side_fill:c={},image_wrap:l=!0,image_smoothing:p=!0,smoothing_quality:m="high",canvas_width:d=null,canvas_height:y=null,resolution:g=1,camera_direction:f={x:0,y:0,z:-1}}=e;if(this.canvas=document.getElementById(t),this.ctx=this.canvas.getContext("2d"),this.ctx.imageSmoothingEnabled=p,this.ctx.imageSmoothingQuality=m,this.resolution=g,this.width=i*this.resolution,this.height=s*this.resolution,this.length=h*this.resolution,this.half_length=h/2*this.resolution,this.num_sides=Math.round(Math.min(100,Math.max(2,n))),this.speed_x=o,this.speed_y=a,this.top_fill="color"===this.check_fill_type(r)?r:pShape.DEFAULT_TOP_FILL,this.bottom_fill="color"===this.check_fill_type(_)?_:pShape.DEFAULT_BOTTOM_FILL,this.top_texture="image"===this.check_fill_type(r)?this.load_image_resource(r):null,this.bottom_texture="image"===this.check_fill_type(_)?this.load_image_resource(_):null,this.image_wrap=l,this.side_fills=this.process_side_fills(c),this.camera_direction=f,null===d||null===y){const t=window.getComputedStyle(this.canvas);this.canvas.width=parseInt(t.width,10)*this.resolution,this.canvas.height=parseInt(t.height,10)*this.resolution}else this.canvas.width=d*this.resolution,this.canvas.height=y*this.resolution;this.resize(),this.center_x=this.canvas.width/2,this.center_y=this.canvas.height/2,this.aspect_ratio=this.canvas.width/this.canvas.height,this.polygon_points=this.generate_polygon_points(),this.top_face_points=new Array(this.num_sides),this.bottom_face_points=new Array(this.num_sides),this.polygon_points.forEach(((t,e)=>{this.top_face_points[e]={x:t.x,y:t.y,z:this.half_length},this.bottom_face_points[e]={x:t.x,y:t.y,z:-this.half_length}})),this.initialize_textures()}initialize_textures(){Promise.all([this.top_texture?this.top_texture:Promise.resolve(null),this.bottom_texture?this.bottom_texture:Promise.resolve(null),this.side_fills?this.side_fills:Promise.resolve(null)]).then((([t,e,i])=>{this.top_texture=t,this.bottom_texture=e,this.side_fills=i,this.start_time=performance.now()/1e3,this.animate()})).catch((t=>{console.error("img load error:",t),this.start_time=performance.now()/1e3,this.animate()}))}async load_image_resource(t){return t instanceof Promise&&(t=await t),Array.isArray(t)?Promise.all(t.map((t=>this.load_image_resource(t)))):"string"==typeof t?pShape.IMAGE_CACHE.has(t)?pShape.IMAGE_CACHE.get(t):new Promise(((e,i)=>{const s=new Image;s.src=t,s.onload=()=>{pShape.IMAGE_CACHE.set(t,s),e(s)},s.onerror=()=>i(new Error(`img load error: ${t}`))})):t}check_fill_type(t){return pShape.FILETYPES.some((e=>t.endsWith(e)))?"image":"color"}process_side_fills(t){if(Array.isArray(t)){if(1===t.length&&this.image_wrap&&"image"===this.check_fill_type(t[0]))return this.split_image(t[0],this.num_sides);const e=[];for(let i=0;i<this.num_sides;i++){const s=t[i]||pShape.DEFAULT_SIDE_FILLS[0];"color"===this.check_fill_type(s)?e.push(Promise.resolve(s)):e.push(this.load_image_resource(s))}return Promise.all(e)}{const e=[];for(let i=1;i<=this.num_sides;i++){const s=t[i]||pShape.DEFAULT_SIDE_FILLS[0];"color"===this.check_fill_type(s)?e.push(Promise.resolve(s)):e.push(this.load_image_resource(s))}return Promise.all(e)}}split_image(t,e){return new Promise(((i,s)=>{const h=new Image;h.src=t,h.onload=async()=>{const t=[],s=h.width/e;for(let i=0;i<e;i++){const e=new OffscreenCanvas(s,h.height),o=e.getContext("2d");o.clearRect(0,0,s,h.height),o.drawImage(h,i*s,0,s,h.height,0,0,s,h.height);try{const i=await e.convertToBlob(),s=await this.load_image_resource(URL.createObjectURL(i));t.push(s)}catch(t){console.error(t)}}i(t)},h.onerror=s}))}animate(){this.render(),requestAnimationFrame((()=>this.animate()))}resize(){this.canvas.width=this.canvas.width,this.canvas.height=this.canvas.height,this.center_x=this.canvas.width/2,this.center_y=this.canvas.height/2,this.aspect_ratio=this.canvas.width/this.canvas.height}generate_polygon_points(){if(4===this.num_sides)return[{x:-this.width/2,y:-this.height/2,z:0},{x:this.width/2,y:-this.height/2,z:0},{x:this.width/2,y:this.height/2,z:0},{x:-this.width/2,y:this.height/2,z:0}];{const t=[];return Array.from({length:this.num_sides}).forEach(((e,i)=>{const s=i/this.num_sides*2*Math.PI;t.push({x:this.width/2*Math.cos(s),y:this.height/2*Math.sin(s),z:0})})),t}}rotate(t,e,i,s,h){const o=t.x,a=t.y*e-t.z*i,n=t.y*i+t.z*e;t.x=o*s+n*h,t.y=a,t.z=-o*h+n*s}project(t){t.x=t.x*this.aspect_ratio+this.center_x,t.y=t.y+this.center_y}render(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const t=performance.now()/1e3-this.start_time,e=t*this.speed_x,i=t*this.speed_y,s=Math.cos(e),h=Math.sin(e),o=Math.cos(i),a=Math.sin(i);for(let t=0;t<this.num_sides;t++){const e=this.polygon_points[t],i=this.top_face_points[t],n=this.bottom_face_points[t];i.x=e.x,i.y=e.y,i.z=this.half_length,n.x=e.x,n.y=e.y,n.z=-this.half_length,this.rotate(i,s,h,o,a),this.rotate(n,s,h,o,a),this.project(i),this.project(n)}const n=Math.cos(e)*Math.cos(i),r=n>0,_=n<0;this.generate_side_faces(this.top_face_points,this.bottom_face_points),r?this.draw_end_face(this.top_face_points,{texture:this.top_texture,face_color:this.top_fill,z_offset:this.half_length,cos_x:s,sin_x:h,cos_y:o,sin_y:a}):_&&this.draw_end_face(this.bottom_face_points,{texture:this.bottom_texture,face_color:this.bottom_fill,z_offset:-this.half_length,cos_x:s,sin_x:h,cos_y:o,sin_y:a})}draw_end_face(t,{texture:e=null,face_color:i,z_offset:s=0,cos_x:h=1,sin_x:o=0,cos_y:a=1,sin_y:n=0}={}){const r=this.ctx;if(e&&e.complete&&e.width>0){const i=[{x:-this.width/2,y:-this.height/2,z:s},{x:this.width/2,y:-this.height/2,z:s},{x:this.width/2,y:this.height/2,z:s},{x:-this.width/2,y:this.height/2,z:s}];i.forEach((t=>{this.rotate(t,h,o,a,n),this.project(t)})),r.save(),r.beginPath(),r.moveTo(t[0].x,t[0].y),t.forEach((t=>r.lineTo(t.x,t.y))),r.closePath(),r.clip(),r.beginPath(),r.moveTo(i[0].x,i[0].y),i.forEach((t=>r.lineTo(t.x,t.y))),r.closePath(),r.fill();const _=e.width,c=e.height,l=i[1].x-i[0].x,p=i[1].y-i[0].y,m=i[3].x-i[0].x,d=i[3].y-i[0].y;r.transform(l/_,p/_,m/c,d/c,i[0].x,i[0].y),r.drawImage(e,0,0),r.restore()}else r.save(),r.beginPath(),r.moveTo(t[0].x,t[0].y),t.forEach((t=>r.lineTo(t.x,t.y))),r.closePath(),r.fillStyle=i,r.fill(),r.restore()}generate_side_faces(t,e){for(let i=0;i<this.num_sides;i++){const s=t[i],h=t[(i+1)%this.num_sides],o=e[i],a=e[(i+1)%this.num_sides],n={x:h.x-s.x,y:h.y-s.y,z:h.z-s.z},r={x:o.x-s.x,y:o.y-s.y,z:o.z-s.z},_={x:n.y*r.z-n.z*r.y,y:n.z*r.x-n.x*r.z,z:n.x*r.y-n.y*r.x};if(_.x*this.camera_direction.x+_.y*this.camera_direction.y+_.z*this.camera_direction.z>0){const t=this.side_fills[i];t instanceof Image?this.draw_side_face(s,h,o,a,t,null):this.draw_side_face(s,h,o,a,null,t)}}}draw_side_face(t,e,i,s,h,o){const a=this.ctx,n=new Path2D;if(n.moveTo(t.x,t.y),n.lineTo(e.x,e.y),n.lineTo(s.x,s.y),n.lineTo(i.x,i.y),n.closePath(),h instanceof Image&&h.complete&&h.width>0){a.save(),a.beginPath(),a.moveTo(t.x,t.y),[t,e,s,i].forEach((t=>a.lineTo(t.x,t.y))),a.closePath(),a.clip(),a.beginPath(),a.fillStyle=o,a.fill();const n=h.width,r=h.height,_=e.x-t.x,c=e.y-t.y,l=i.x-t.x,p=i.y-t.y;a.transform(_/n,c/n,l/r,p/r,t.x,t.y),a.drawImage(h,0,0),a.restore()}else a.fillStyle=o,a.fill(n)}}function build(t,e){return new pShape(t,e)}
