class pShape{static DEFAULT_TOP_FILL="red";static DEFAULT_BOTTOM_FILL="blue";static DEFAULT_SIDE_FILLS=["green"];static FILETYPES=[".png",".jpg",".jpeg",".svg",".webp"];constructor(t,e={}){const{radius:i=240,thickness:s=60,speed_x:h=2,speed_y:a=.25,number_of_sides:o=14,top_fill:_=pShape.DEFAULT_TOP_FILL,bottom_fill:n=pShape.DEFAULT_BOTTOM_FILL,side_fills:c=pShape.DEFAULT_SIDE_FILLS,image_smoothing:r=!0,smoothing_quality:l="high",camera_direction:f={x:0,y:0,z:-1}}=e;this.canvas=document.getElementById(t),this.ctx=this.canvas.getContext("2d"),this.ctx.imageSmoothingEnabled=r,this.ctx.imageSmoothingQuality=l,this.radius=i,this.thickness=s,this.half_thickness=s/2,this.speed_x=h,this.speed_y=a,this.number_of_sides=Math.round(Math.min(100,Math.max(2,o))),this.top_fill="color"===this.check_fill_type(_)?pShape.DEFAULT_TOP_FILL:_,this.bottom_fill="color"===this.check_fill_type(n)?pShape.DEFAULT_BOTTOM_FILL:n,this.side_fills=this.check_side_fills(c),this.top_face_texture=this.load_image(this.top_fill),this.bottom_face_texture=this.load_image(this.bottom_fill),this.camera_direction=f,this.resize(),this.center_x=this.canvas.width/2,this.center_y=this.canvas.height/2,this.aspect_ratio=this.canvas.width/this.canvas.height,this.polygon_points=this.generate_polygon_points(),this.top_face_points=new Array(this.number_of_sides),this.bottom_face_points=new Array(this.number_of_sides),this.animate()}check_fill_type(t){if(!t||""===t.trim())return"color";if("string"==typeof t)for(let e of pShape.FILETYPES)if(t.endsWith(e))return"image";return"color"}load_image(t){if("image"===this.check_fill_type(t)){const e=new Image;return e.src=t,e}return null}check_side_fills(t){if(t&&0!==t.length||(t=new Array(this.number_of_sides).fill(pShape.DEFAULT_SIDE_FILLS[0])),1===t.length&&"image"===this.check_fill_type(t[0])){const e=t[0];return this.split_image(e,this.number_of_sides)}return t.length<this.number_of_sides&&(t.length>0?t.push(...new Array(this.number_of_sides-t.length).fill(t[0])):t.push(...new Array(this.number_of_sides-t.length).fill(pShape.DEFAULT_SIDE_FILLS[0]))),t.map((t=>this.load_image(t)||t))}split_image(t,e){const i=new Image;i.src=t;const s=[];return i.onload=()=>{const t=i.width/e;for(let h=0;h<e;h++){const e=document.createElement("canvas"),a=e.getContext("2d");e.width=t,e.height=i.height,a.drawImage(i,h*t,0,t,i.height,0,0,t,i.height);const o=new Image;o.src=e.toDataURL(),s.push(o)}},s}animate(){this.render(),requestAnimationFrame((()=>this.animate()))}resize(){this.canvas.width=800,this.canvas.height=600,this.center_x=this.canvas.width/2,this.center_y=this.canvas.height/2,this.aspect_ratio=this.canvas.width/this.canvas.height}generate_polygon_points(){const t=[];for(let e=0;e<this.number_of_sides;e++){const i=e/this.number_of_sides*2*Math.PI;t.push({x:this.radius*Math.cos(i),y:this.radius*Math.sin(i),z:0})}return t}rotate(t,e,i,s,h){let a=t.x,o=t.y*e-t.z*i,_=t.y*i+t.z*e;t.x=a*s+_*h,t.y=o,t.z=-a*h+_*s}project(t){t.x=t.x*this.aspect_ratio+this.center_x,t.y=t.y+this.center_y}render(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const t=performance.now()/1e3,e=t*this.speed_x,i=t*this.speed_y,s=Math.cos(e),h=Math.sin(e),a=Math.cos(i),o=Math.sin(i);for(let t=0;t<this.number_of_sides;t++){const e=this.polygon_points[t];this.top_face_points[t]={...e,z:this.half_thickness},this.bottom_face_points[t]={...e,z:-this.half_thickness}}this.top_face_points.forEach((t=>this.rotate(t,s,h,a,o))),this.bottom_face_points.forEach((t=>this.rotate(t,s,h,a,o))),this.top_face_points.forEach((t=>this.project(t))),this.bottom_face_points.forEach((t=>this.project(t)));const _=Math.cos(e)*Math.cos(i),n=_>0,c=_<0;this.draw_side_faces(this.top_face_points,this.bottom_face_points),c&&(this.draw_end_face(this.bottom_face_points,this.bottom_fill),this.bottom_face_texture&&this.draw_end_face_texture(this.bottom_face_points,this.bottom_face_texture,-this.half_thickness,s,h,a,o)),n&&(this.draw_end_face(this.top_face_points,this.top_fill),this.top_face_texture&&this.draw_end_face_texture(this.top_face_points,this.top_face_texture,this.half_thickness,s,h,a,o))}draw_end_face(t,e){const i=this.ctx;i.save(),i.beginPath(),i.moveTo(t[0].x,t[0].y),t.forEach((t=>{i.lineTo(t.x,t.y)})),i.closePath(),i.fillStyle=e,i.fill(),i.restore()}draw_end_face_texture(t,e,i,s,h,a,o){const _=[{x:-this.radius,y:-this.radius,z:i},{x:this.radius,y:-this.radius,z:i},{x:this.radius,y:this.radius,z:i},{x:-this.radius,y:this.radius,z:i}];_.forEach((t=>this.rotate(t,s,h,a,o))),_.forEach((t=>this.project(t)));const n=this.ctx;if(n.save(),n.beginPath(),n.moveTo(t[0].x,t[0].y),t.forEach((t=>n.lineTo(t.x,t.y))),n.closePath(),n.clip(),n.beginPath(),n.moveTo(_[0].x,_[0].y),_.forEach((t=>n.lineTo(t.x,t.y))),n.closePath(),n.fill(),e.complete&&e.width>0){const t=e.width,i=e.height,s=_[1].x-_[0].x,h=_[1].y-_[0].y,a=_[3].x-_[0].x,o=_[3].y-_[0].y;n.transform(s/t,h/t,a/i,o/i,_[0].x,_[0].y),n.drawImage(e,0,0)}n.restore()}draw_side_faces(t,e){for(let i=0;i<this.number_of_sides;i++){const s=t[i],h=t[(i+1)%this.number_of_sides],a=e[i],o=e[(i+1)%this.number_of_sides],_={x:h.x-s.x,y:h.y-s.y,z:h.z-s.z},n={x:a.x-s.x,y:a.y-s.y,z:a.z-s.z},c={x:_.y*n.z-_.z*n.y,y:_.z*n.x-_.x*n.z,z:_.x*n.y-_.y*n.x},r=Math.sqrt(c.x**2+c.y**2+c.z**2);c.x/=r,c.y/=r,c.z/=r;if(c.x*this.camera_direction.x+c.y*this.camera_direction.y+c.z*this.camera_direction.z>0){const t=this.side_fills[i];t instanceof Image?this.draw_side_face_texture(s,h,a,o,t,null):this.draw_side_face_texture(s,h,a,o,null,t)}}}draw_side_face_texture(t,e,i,s,h,a){const o=this.ctx,_=new Path2D;if(_.moveTo(t.x,t.y),_.lineTo(e.x,e.y),_.lineTo(s.x,s.y),_.lineTo(i.x,i.y),_.closePath(),h instanceof Image&&h.complete&&h.width>0){o.save(),o.beginPath(),o.moveTo(t.x,t.y),[t,e,s,i].forEach((t=>{o.lineTo(t.x,t.y)})),o.closePath(),o.clip(),o.fillStyle=a,o.fill();const _=h.width,n=h.height,c=e.x-t.x,r=e.y-t.y,l=i.x-t.x,f=i.y-t.y;o.transform(c/_,r/_,l/n,f/n,t.x,t.y),o.drawImage(h,0,0),o.restore()}else o.fillStyle=a,o.fill(_)}}function create_shape(t,e){return new pShape(t,e)}
